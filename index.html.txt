<!DOCTYPE html>
<html>
<head>
    <title>3D Zombie Survival Game</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        body { margin: 0; overflow: hidden; background-color: lightgray; }
        canvas { width: 100%; height: 100%; }
        #shoot-area {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 80px;
            height: 80px;
            background: rgba(255, 0, 0, 0.5);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 16px;
            font-family: Arial, sans-serif;
            touch-action: none;
            z-index: 10;
        }
        #joystick {
            position: absolute;
            bottom: 10px;
            right: 10px;
            width: 100px;
            height: 100px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 50%;
            touch-action: none;
            z-index: 10;
        }
        #joystick-knob {
            position: absolute;
            width: 40px;
            height: 40px;
            background: rgba(0, 0, 255, 0.7);
            border-radius: 50%;
            top: 30px;
            left: 30px;
            transition: transform 0.1s;
        }
        #status {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 18px;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 5px;
            z-index: 10;
        }
    </style>
</head>
<body>
    <div id="status">Loading...</div>
    <div id="shoot-area">Shoot</div>
    <div id="joystick">
        <div id="joystick-knob"></div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" onerror="document.getElementById('status').innerText = 'Failed to load Three.js from cdnjs CDN (r128). Check network.';"></script>
    <script>
        window.onload = function() {
            if (typeof THREE === 'undefined') {
                document.getElementById("status").innerText = "Three.js is not defined. Ensure the cdnjs CDN link is correct.";
                throw new Error("Three.js not loaded");
            }

            try {
                console.log("Three.js loaded, version:", THREE.REVISION);

                if (!THREE.WebGLRenderer) {
                    document.getElementById("status").innerText = "WebGL is not supported on this device.";
                    throw new Error("WebGL not supported");
                }

                const scene = new THREE.Scene();
                scene.background = new THREE.Color(0x87CEEB);
                const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
                const renderer = new THREE.WebGLRenderer();
                renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1.5));
                renderer.setSize(window.innerWidth, window.innerHeight);
                if (!document.body.contains(renderer.domElement)) {
                    document.body.appendChild(renderer.domElement);
                    console.log("Renderer canvas appended");
                }

                const groundGeometry = new THREE.PlaneGeometry(200, 200);
                const groundMaterial = new THREE.MeshBasicMaterial({ color: 0x228B22, side: THREE.DoubleSide });
                const ground = new THREE.Mesh(groundGeometry, groundMaterial);
                ground.rotation.x = Math.PI / 2;
                scene.add(ground);

                // Add trees (40)
                for (let i = 0; i < 40; i++) {
                    const trunkGeometry = new THREE.CylinderGeometry(0.5, 0.5, 2, 8);
                    const trunkMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });
                    const trunk = new THREE.Mesh(trunkGeometry, trunkMaterial);
                    trunk.position.set(
                        Math.random() * 180 - 90,
                        1,
                        Math.random() * 180 - 90
                    );

                    const leavesGeometry = new THREE.BoxGeometry(2, 2, 2);
                    const leavesMaterial = new THREE.MeshBasicMaterial({ color: 0x228B22 });
                    const leaves = new THREE.Mesh(leavesGeometry, leavesMaterial);
                    leaves.position.y = 2.5;
                    trunk.add(leaves);

                    scene.add(trunk);
                }

                // Add shrubs (30)
                for (let i = 0; i < 30; i++) {
                    const shrubGeometry = new THREE.SphereGeometry(1, 8, 8);
                    const shrubMaterial = new THREE.MeshBasicMaterial({ color: 0x32CD32 });
                    const shrub = new THREE.Mesh(shrubGeometry, shrubMaterial);
                    shrub.position.set(
                        Math.random() * 180 - 90,
                        0.5,
                        Math.random() * 180 - 90
                    );
                    scene.add(shrub);
                }

                const playerGroup = new THREE.Group();
                const bodyGeometry = new THREE.BoxGeometry(0.6, 1.2, 0.4);
                const bodyMaterial = new THREE.MeshBasicMaterial({ color: 0xFFDAB9 });
                const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
                body.position.y = 0.6;
                playerGroup.add(body);

                const headGeometry = new THREE.BoxGeometry(0.4, 0.4, 0.4);
                const headMaterial = new THREE.MeshBasicMaterial({ color: 0xFFDAB9 });
                const head = new THREE.Mesh(headGeometry, headMaterial);
                head.position.y = 1.4;
                playerGroup.add(head);

                const leftArmGeometry = new THREE.BoxGeometry(0.2, 0.8, 0.2);
                const leftArm = new THREE.Mesh(leftArmGeometry, bodyMaterial);
                leftArm.position.set(-0.5, 0.8, 0);
                leftArm.rotation.z = Math.PI / 6;
                playerGroup.add(leftArm);

                const rightArmGeometry = new THREE.BoxGeometry(0.2, 0.8, 0.2);
                const rightArm = new THREE.Mesh(rightArmGeometry, bodyMaterial);
                rightArm.position.set(0.5, 0.8, 0);
                rightArm.rotation.z = -Math.PI / 6;
                playerGroup.add(rightArm);

                const leftLegGeometry = new THREE.BoxGeometry(0.3, 0.8, 0.3);
                const leftLeg = new THREE.Mesh(leftLegGeometry, bodyMaterial);
                leftLeg.position.set(-0.2, -0.2, 0);
                playerGroup.add(leftLeg);

                const rightLegGeometry = new THREE.BoxGeometry(0.3, 0.8, 0.3);
                const rightLeg = new THREE.Mesh(rightLegGeometry, bodyMaterial);
                rightLeg.position.set(0.2, -0.2, 0);
                playerGroup.add(rightLeg);

                playerGroup.position.set(0, 0.5, 0);
                scene.add(playerGroup);

                const zombies = [];
                const zombieCount = 15;
                for (let i = 0; i < zombieCount; i++) {
                    const zombieGroup = new THREE.Group();
                    const zombieBodyGeometry = new THREE.BoxGeometry(0.6, 1.0, 0.4);
                    const zombieBodyMaterial = new THREE.MeshBasicMaterial({ color: 0x90EE90 });
                    const zombieBody = new THREE.Mesh(zombieBodyGeometry, zombieBodyMaterial);
                    zombieBody.position.y = 0.5;

                    const zombieHeadGeometry = new THREE.BoxGeometry(0.4, 0.4, 0.4);
                    const zombieHeadMaterial = new THREE.MeshBasicMaterial({ color: 0x90EE90 });
                    const zombieHead = new THREE.Mesh(zombieHeadGeometry, zombieHeadMaterial);
                    zombieHead.position.y = 1.3;

                    const zombieLeftArmGeometry = new THREE.BoxGeometry(0.2, 0.7, 0.2);
                    const zombieLeftArm = new THREE.Mesh(zombieLeftArmGeometry, zombieBodyMaterial);
                    zombieLeftArm.position.set(-0.5, 0.6, 0);
                    zombieLeftArm.rotation.z = Math.PI / 4;

                    const zombieRightArmGeometry = new THREE.BoxGeometry(0.2, 0.7, 0.2);
                    const zombieRightArm = new THREE.Mesh(zombieRightArmGeometry, zombieBodyMaterial);
                    zombieRightArm.position.set(0.5, 0.6, 0);
                    zombieRightArm.rotation.z = -Math.PI / 4;

                    const zombieLeftLegGeometry = new THREE.BoxGeometry(0.3, 0.7, 0.3);
                    const zombieLeftLeg = new THREE.Mesh(zombieLeftLegGeometry, zombieBodyMaterial);
                    zombieLeftLeg.position.set(-0.2, -0.1, 0);

                    const zombieRightLegGeometry = new THREE.BoxGeometry(0.3, 0.7, 0.3);
                    const zombieRightLeg = new THREE.Mesh(zombieRightLegGeometry, zombieBodyMaterial);
                    zombieRightLeg.position.set(0.2, -0.1, 0);

                    zombieGroup.add(zombieBody, zombieHead, zombieLeftArm, zombieRightArm, zombieLeftLeg, zombieRightLeg);
                    zombieGroup.position.set(
                        Math.random() * 180 - 90,
                        0.5,
                        Math.random() * 180 - 90
                    );
                    zombies.push({ mesh: zombieGroup, alive: true });
                    scene.add(zombieGroup);
                }

                const projectiles = [];
                function shootProjectile() {
                    if (projectiles.length > 10) return;
                    const projectileGeometry = new THREE.SphereGeometry(0.1, 4, 4);
                    const projectileMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });
                    const projectile = new THREE.Mesh(projectileGeometry, projectileMaterial);
                    projectile.position.copy(playerGroup.position);
                    projectile.position.y = 0.8;
                    const direction = new THREE.Vector3();
                    camera.getWorldDirection(direction);
                    direction.y = 0;
                    direction.normalize();
                    projectile.userData = { direction: direction, speed: 0.5 };
                    projectiles.push(projectile);
                    scene.add(projectile);
                    console.log("Projectile fired");
                }

                camera.position.set(0, 3, 5);
                camera.lookAt(playerGroup.position);

                let health = 100;
                let moveSpeed = 0.03;
                let rotationSpeed = 0.02;
                let joystickActive = false;
                let joystickX = 0;
                let joystickY = 0;

                const joystick = document.getElementById("joystick");
                const joystickKnob = document.getElementById("joystick-knob");
                const shootArea = document.getElementById("shoot-area");

                joystick.addEventListener("touchstart", (e) => {
                    e.preventDefault();
                    joystickActive = true;
                    updateJoystick(e.touches[0]);
                    console.log("Joystick touchstart");
                });

                joystick.addEventListener("touchmove", (e) => {
                    e.preventDefault();
                    if (joystickActive) updateJoystick(e.touches[0]);
                });

                joystick.addEventListener("touchend", (e) => {
                    joystickActive = false;
                    joystickX = 0;
                    joystickY = 0;
                    joystickKnob.style.transform = `translate(30px, 30px)`;
                    console.log("Joystick touchend");
                });

                function updateJoystick(touch) {
                    try {
                        const rect = joystick.getBoundingClientRect();
                        const centerX = rect.left + rect.width / 2;
                        const centerY = rect.top + rect.height / 2;
                        joystickX = (touch.clientX - centerX) / (rect.width / 2); // Left = negative, Right = positive
                        joystickY = (touch.clientY - centerY) / (rect.height / 2) * -1; // Up = negative, Down = positive
                        const magnitude = Math.sqrt(joystickX * joystickX + joystickY * joystickY);
                        if (magnitude < 0.2) { // Dead zone
                            joystickX = 0;
                            joystickY = 0;
                        } else {
                            const maxMagnitude = Math.min(1, magnitude);
                            joystickX *= maxMagnitude / magnitude;
                            joystickY *= maxMagnitude / magnitude;
                        }
                        joystickX *= 0.6; // Reduced sensitivity
                        joystickY *= 0.6; // Reduced sensitivity
                        const maxOffset = 30;
                        joystickKnob.style.transform = `translate(${30 + joystickX * maxOffset * 2}px, ${30 + joystickY * maxOffset * 2}px)`;
                    } catch (error) {
                        console.error("Joystick update error:", error);
                    }
                }

                shootArea.addEventListener("touchstart", (e) => {
                    e.preventDefault();
                    shootProjectile();
                    console.log("Shoot area touched");
                });

                document.addEventListener("keydown", (event) => {
                    if (event.code === "Space") shootProjectile();
                    if (event.code === "ArrowUp" || event.code === "KeyW") joystickY = -0.6;
                    if (event.code === "ArrowDown" || event.code === "KeyS") joystickY = 0.6;
                    if (event.code === "ArrowLeft" || event.code === "KeyA") joystickX = -0.6;
                    if (event.code === "ArrowRight" || event.code === "KeyD") joystickX = 0.6;
                });

                document.addEventListener("keyup", (event) => {
                    if (event.code === "ArrowUp" || event.code === "KeyW" || event.code === "ArrowDown" || event.code === "KeyS") joystickY = 0;
                    if (event.code === "ArrowLeft" || event.code === "KeyA" || event.code === "ArrowRight" || event.code === "KeyD") joystickX = 0;
                });

                function animate() {
                    requestAnimationFrame(animate);

                    try {
                        if (joystickActive || joystickX !== 0 || joystickY !== 0) {
                            // Calculate movement based on player's rotation
                            const forward = new THREE.Vector3(0, 0, -1).applyAxisAngle(new THREE.Vector3(0, 1, 0), playerGroup.rotation.y);
                            const right = new THREE.Vector3(1, 0, 0).applyAxisAngle(new THREE.Vector3(0, 1, 0), playerGroup.rotation.y);
                            const moveDirection = forward.clone().multiplyScalar(joystickY).add(right.clone().multiplyScalar(joystickX));
                            playerGroup.position.addScaledVector(moveDirection.normalize(), moveSpeed * 10);

                            // Rotate based on joystickX
                            playerGroup.rotation.y += joystickX * rotationSpeed * 10;
                            console.log("Player moved: x=", playerGroup.position.x, "z=", playerGroup.position.z, "rotation=", playerGroup.rotation.y);
                        }

                        playerGroup.position.x = Math.max(-100, Math.min(100, playerGroup.position.x));
                        playerGroup.position.z = Math.max(-100, Math.min(100, playerGroup.position.z));

                        camera.position.set(playerGroup.position.x, 3, playerGroup.position.z + 5);
                        camera.lookAt(playerGroup.position);

                        zombies.forEach(zombie => {
                            if (!zombie.alive) return;
                            const direction = playerGroup.position.clone().sub(zombie.mesh.position).normalize();
                            zombie.mesh.position.addScaledVector(direction, 0.05);
                        });

                        projectiles.forEach((projectile, index) => {
                            projectile.position.addScaledVector(projectile.userData.direction, projectile.userData.speed);
                            if (projectile.position.length() > 200) {
                                scene.remove(projectile);
                                projectiles.splice(index, 1);
                            }

                            zombies.forEach(zombie => {
                                if (!zombie.alive) return;
                                const distance = projectile.position.distanceTo(zombie.mesh.position);
                                if (distance < 0.5) {
                                    zombie.alive = false;
                                    scene.remove(zombie.mesh);
                                    scene.remove(projectile);
                                    projectiles.splice(projectiles.indexOf(projectile), 1);
                                }
                            });
                        });

                        zombies.forEach(zombie => {
                            if (!zombie.alive) return;
                            const distance = playerGroup.position.distanceTo(zombie.mesh.position);
                            if (distance < 1) {
                                health -= 0.1;
                                if (health <= 0) {
                                    alert("Game Over! Refresh to restart.");
                                    health = 0;
                                }
                            }
                        });

                        const aliveZombies = zombies.filter(z => z.alive).length;
                        document.getElementById("status").innerText = `Health: ${Math.round(health)} | Zombies: ${aliveZombies}`;
                        if (aliveZombies === 0) {
                            alert("You Win! All zombies defeated. Refresh to restart.");
                            zombies.forEach(z => z.alive = false);
                        }

                        renderer.render(scene, camera);
                    } catch (error) {
                        console.error("Animate error:", error);
                        document.getElementById("status").innerText = "Render Error: " + error.message;
                    }
                }
                animate();

                window.addEventListener("resize", () => {
                    camera.aspect = window.innerWidth / window.innerHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(window.innerWidth, window.innerHeight);
                });

                document.getElementById("status").innerText = "Game running!";
            } catch (error) {
                document.getElementById("status").innerText = "Error: " + error.message;
                console.error("Three.js Error:", error);
            }
        };
    </script>
</body>
</html>